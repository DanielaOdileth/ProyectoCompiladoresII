
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 29 23:46:30 CST 2017
//----------------------------------------------------

package proyecto_compiladores;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 29 23:46:30 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\002\000\002\004\003\000\002\004\006" +
    "\000\002\004\007\000\002\043\002\000\002\043\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\006\000\002\042\005\000\002\042\003\000\002\047" +
    "\003\000\002\047\003\000\002\006\007\000\002\011\003" +
    "\000\002\011\003\000\002\012\004\000\002\013\010\000" +
    "\002\007\004\000\002\007\007\000\002\007\005\000\002" +
    "\050\005\000\002\014\004\000\002\014\006\000\002\015" +
    "\003\000\002\010\005\000\002\017\007\000\002\017\011" +
    "\000\002\020\004\000\002\044\004\000\002\044\002\000" +
    "\002\021\006\000\002\021\006\000\002\022\004\000\002" +
    "\022\006\000\002\022\006\000\002\022\002\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\046\010\000\002\024\005\000\002\026\003\000" +
    "\002\026\005\000\002\041\005\000\002\027\006\000\002" +
    "\030\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\006\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\005\000" +
    "\002\025\003\000\002\025\006\000\002\031\003\000\002" +
    "\031\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\016" +
    "\003\000\002\037\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\015\005\001\002\000\004\002\236\001" +
    "\002\000\014\006\ufffa\020\ufffa\021\ufffa\045\ufffa\052\006" +
    "\001\002\000\020\006\ufff9\011\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\045\ufff9\054\ufff9\001\002\000\012\006\ufffe\020\014" +
    "\021\013\045\011\001\002\000\006\006\ufff8\026\ufff8\001" +
    "\002\000\062\004\uffb1\006\uffb1\014\uffb1\017\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\053\uffb1\001" +
    "\002\000\004\044\235\001\002\000\006\045\ufffa\052\006" +
    "\001\002\000\006\045\ufffa\052\006\001\002\000\010\006" +
    "\ufff6\026\ufff6\030\174\001\002\000\006\006\ufff7\026\ufff7" +
    "\001\002\000\006\006\ufffd\026\142\001\002\000\004\006" +
    "\021\001\002\000\016\006\ufffa\010\uffd9\011\ufffa\045\ufffa" +
    "\052\006\054\ufffa\001\002\000\004\010\141\001\002\000" +
    "\012\006\037\011\033\045\011\054\025\001\002\000\004" +
    "\026\137\001\002\000\020\012\055\023\050\024\044\030" +
    "\054\045\011\046\045\047\061\001\002\000\020\006\uffd2" +
    "\007\127\010\uffd2\011\uffd2\045\uffd2\052\uffd2\054\uffd2\001" +
    "\002\000\006\010\uffdc\026\125\001\002\000\006\032\114" +
    "\043\123\001\002\000\020\006\uffd7\010\uffd7\011\uffd7\026" +
    "\uffd7\045\uffd7\052\uffd7\054\uffd7\001\002\000\020\006\uffd6" +
    "\010\uffd6\011\uffd6\026\uffd6\045\uffd6\052\uffd6\054\uffd6\001" +
    "\002\000\020\012\055\023\050\024\044\030\054\045\011" +
    "\046\045\047\061\001\002\000\020\006\uffd5\010\uffd5\011" +
    "\uffd5\026\uffd5\045\uffd5\052\uffd5\054\uffd5\001\002\000\016" +
    "\006\ufffa\010\uffd9\011\ufffa\045\ufffa\052\006\054\ufffa\001" +
    "\002\000\010\030\043\032\uffe5\043\uffe5\001\002\000\016" +
    "\006\ufffa\010\uffd9\011\ufffa\045\ufffa\052\006\054\ufffa\001" +
    "\002\000\006\032\uffc4\043\uffc4\001\002\000\004\010\042" +
    "\001\002\000\020\006\uffce\010\uffce\011\uffce\026\uffce\045" +
    "\uffce\052\uffce\054\uffce\001\002\000\020\012\055\023\050" +
    "\024\044\030\054\045\011\046\045\047\061\001\002\000" +
    "\020\012\uffb3\023\uffb3\024\uffb3\030\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\001\002\000\046\004\uffb0\014\uffb0\017\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\053\uffb0\001\002\000\004\031\117\001\002\000\050" +
    "\004\uffcb\014\uffcb\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\031\uffcb\032\114\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\053\uffcb\001" +
    "\002\000\020\012\uffb4\023\uffb4\024\uffb4\030\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\001\002\000\046\004\uffcd\014\uffcd\017" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\053\uffcd\001\002\000\046\004\uffcc\014\uffcc" +
    "\017\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\053\uffcc\001\002\000\054\004\uffe5\014" +
    "\uffe5\017\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\053\uffe5" +
    "\001\002\000\020\012\055\023\050\024\044\030\054\045" +
    "\011\046\045\047\061\001\002\000\020\012\uffb2\023\uffb2" +
    "\024\uffb2\030\uffb2\045\uffb2\046\uffb2\047\uffb2\001\002\000" +
    "\036\004\070\014\104\022\102\023\074\024\067\025\071" +
    "\027\110\031\uffc2\034\073\035\075\036\077\037\076\040" +
    "\066\041\072\001\002\000\020\012\055\023\050\024\044" +
    "\030\054\045\011\046\045\047\061\001\002\000\052\004" +
    "\uffc4\014\uffc4\017\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\062\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\053\uffc4" +
    "\001\002\000\046\004\uffaf\014\uffaf\017\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\053" +
    "\uffaf\001\002\000\020\012\055\023\050\024\044\030\054" +
    "\045\011\046\045\047\061\001\002\000\004\031\064\001" +
    "\002\000\046\004\uffca\014\uffca\017\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\053\uffca" +
    "\001\002\000\046\004\070\014\104\017\uffc6\022\102\023" +
    "\074\024\067\025\071\026\uffc6\027\uffc6\031\uffc6\033\uffc6" +
    "\034\073\035\075\036\077\037\076\040\066\041\072\053" +
    "\uffc6\001\002\000\020\012\uffbc\023\uffbc\024\uffbc\030\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\001\002\000\020\012\uffb9\023" +
    "\uffb9\024\uffb9\030\uffb9\045\uffb9\046\uffb9\047\uffb9\001\002" +
    "\000\020\012\uffb5\023\uffb5\024\uffb5\030\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\001\002\000\020\012\uffb6\023\uffb6\024\uffb6" +
    "\030\uffb6\045\uffb6\046\uffb6\047\uffb6\001\002\000\020\012" +
    "\uffbb\023\uffbb\024\uffbb\030\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\001\002\000\020\012\uffbe\023\uffbe\024\uffbe\030\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\001\002\000\020\012\uffba\023\uffba" +
    "\024\uffba\030\uffba\045\uffba\046\uffba\047\uffba\001\002\000" +
    "\020\012\uffbf\023\uffbf\024\uffbf\030\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\001\002\000\020\012\uffbd\023\uffbd\024\uffbd\030" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\001\002\000\020\012\uffc0" +
    "\023\uffc0\024\uffc0\030\uffc0\045\uffc0\046\uffc0\047\uffc0\001" +
    "\002\000\020\012\055\023\050\024\044\030\054\045\011" +
    "\046\045\047\061\001\002\000\020\012\055\023\050\024" +
    "\044\030\054\045\011\046\045\047\061\001\002\000\020" +
    "\012\uffb7\023\uffb7\024\uffb7\030\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\001\002\000\020\012\055\023\050\024\044\030\054" +
    "\045\011\046\045\047\061\001\002\000\020\012\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002" +
    "\000\046\004\070\014\104\017\uffc7\022\102\023\074\024" +
    "\067\025\071\026\uffc7\027\uffc7\031\uffc7\033\uffc7\034\073" +
    "\035\075\036\077\037\076\040\066\041\072\053\uffc7\001" +
    "\002\000\046\004\070\014\104\017\uffc8\022\102\023\074" +
    "\024\067\025\071\026\uffc8\027\uffc8\031\uffc8\033\uffc8\034" +
    "\073\035\075\036\077\037\076\040\066\041\072\053\uffc8" +
    "\001\002\000\046\004\070\014\104\017\uffc9\022\102\023" +
    "\074\024\067\025\071\026\uffc9\027\uffc9\031\uffc9\033\uffc9" +
    "\034\073\035\075\036\077\037\076\040\066\041\072\053" +
    "\uffc9\001\002\000\020\012\055\023\050\024\044\030\054" +
    "\045\011\046\045\047\061\001\002\000\004\031\uffc1\001" +
    "\002\000\034\004\070\014\104\022\102\023\074\024\067" +
    "\025\071\031\113\034\073\035\075\036\077\037\076\040" +
    "\066\041\072\001\002\000\046\004\uffc5\014\uffc5\017\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\053\uffc5\001\002\000\020\012\055\023\050\024" +
    "\044\030\054\045\011\046\045\047\061\001\002\000\034" +
    "\004\070\014\104\022\102\023\074\024\067\025\071\033" +
    "\116\034\073\035\075\036\077\037\076\040\066\041\072" +
    "\001\002\000\052\004\uffc3\014\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\043\uffc3\053\uffc3\001\002\000\020\006\uffcf\010\uffcf" +
    "\011\uffcf\026\uffcf\045\uffcf\052\uffcf\054\uffcf\001\002\000" +
    "\004\010\uffd8\001\002\000\034\004\070\014\104\017\122" +
    "\022\102\023\074\024\067\025\071\034\073\035\075\036" +
    "\077\037\076\040\066\041\072\001\002\000\020\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\045\uffd0\052\uffd0\054\uffd0\001" +
    "\002\000\020\012\055\023\050\024\044\030\054\045\011" +
    "\046\045\047\061\001\002\000\034\004\070\014\104\022" +
    "\102\023\074\024\067\025\071\026\uffd3\034\073\035\075" +
    "\036\077\037\076\040\066\041\072\001\002\000\016\006" +
    "\ufffa\010\uffd9\011\ufffa\045\ufffa\052\006\054\ufffa\001\002" +
    "\000\004\010\uffdb\001\002\000\010\006\037\045\011\054" +
    "\025\001\002\000\004\030\043\001\002\000\016\006\uffd1" +
    "\010\uffd1\011\uffd1\045\uffd1\052\uffd1\054\uffd1\001\002\000" +
    "\034\004\070\014\104\022\102\023\074\024\067\025\071" +
    "\034\073\035\075\036\077\037\076\040\066\041\072\053" +
    "\133\001\002\000\004\006\134\001\002\000\010\006\037" +
    "\045\011\054\025\001\002\000\004\010\136\001\002\000" +
    "\020\006\uffd4\010\uffd4\011\uffd4\026\uffd4\045\uffd4\052\uffd4" +
    "\054\uffd4\001\002\000\016\006\ufffa\010\uffd9\011\ufffa\045" +
    "\ufffa\052\006\054\ufffa\001\002\000\004\010\uffda\001\002" +
    "\000\014\006\uffff\020\uffff\021\uffff\044\uffff\045\uffff\001" +
    "\002\000\016\006\ufffa\016\ufffa\020\ufffa\021\ufffa\045\ufffa" +
    "\052\006\001\002\000\014\006\ufffe\016\145\020\014\021" +
    "\013\045\011\001\002\000\004\026\172\001\002\000\004" +
    "\045\011\001\002\000\004\006\ufffc\001\002\000\012\006" +
    "\ufffe\020\014\021\013\045\011\001\002\000\004\006\ufffb" +
    "\001\002\000\004\030\152\001\002\000\004\021\153\001" +
    "\002\000\004\045\011\001\002\000\006\021\153\031\uffdf" +
    "\001\002\000\004\031\156\001\002\000\006\026\uffe3\042" +
    "\157\001\002\000\004\045\011\001\002\000\004\026\uffe2" +
    "\001\002\000\004\026\162\001\002\000\020\006\uffed\021" +
    "\uffed\026\uffed\027\uffed\031\uffed\045\uffed\052\uffed\001\002" +
    "\000\004\031\uffe1\001\002\000\006\021\153\031\uffdf\001" +
    "\002\000\004\031\uffe0\001\002\000\004\042\167\001\002" +
    "\000\004\045\011\001\002\000\006\021\uffdd\031\uffdd\001" +
    "\002\000\010\021\uffde\026\162\031\uffde\001\002\000\012" +
    "\006\ufffe\020\014\021\013\045\011\001\002\000\012\006" +
    "\uffe4\020\uffe4\021\uffe4\045\uffe4\001\002\000\006\021\013" +
    "\045\011\001\002\000\006\027\201\031\202\001\002\000" +
    "\006\027\ufff1\031\ufff1\001\002\000\006\027\ufff2\031\ufff2" +
    "\001\002\000\006\027\ufff3\031\ufff3\001\002\000\006\021" +
    "\013\045\011\001\002\000\006\006\ufff5\026\ufff5\001\002" +
    "\000\006\027\ufff4\031\ufff4\001\002\000\004\045\011\001" +
    "\002\000\004\034\206\001\002\000\006\005\212\045\011" +
    "\001\002\000\020\006\uffef\021\uffef\026\uffef\027\uffef\031" +
    "\uffef\045\uffef\052\uffef\001\002\000\020\006\uffee\021\uffee" +
    "\026\uffee\027\uffee\031\uffee\045\uffee\052\uffee\001\002\000" +
    "\006\006\ufff0\026\ufff0\001\002\000\004\032\213\001\002" +
    "\000\004\046\045\001\002\000\004\033\215\001\002\000" +
    "\004\013\216\001\002\000\006\005\212\045\011\001\002" +
    "\000\020\006\uffec\021\uffec\026\uffec\027\uffec\031\uffec\045" +
    "\uffec\052\uffec\001\002\000\004\042\227\001\002\000\014" +
    "\006\uffeb\021\013\026\uffeb\027\uffeb\031\uffeb\001\002\000" +
    "\004\045\011\001\002\000\006\027\224\042\uffe7\001\002" +
    "\000\006\045\ufffa\052\006\001\002\000\004\042\uffe6\001" +
    "\002\000\012\006\uffe9\026\uffe9\027\uffe9\031\uffe9\001\002" +
    "\000\006\005\212\045\011\001\002\000\020\006\uffe8\021" +
    "\uffe8\026\uffe8\027\uffe8\031\uffe8\045\ufffa\052\006\001\002" +
    "\000\004\042\233\001\002\000\012\006\uffea\026\uffea\027" +
    "\uffea\031\uffea\001\002\000\006\005\212\045\011\001\002" +
    "\000\012\006\uffe8\026\uffe8\027\uffe8\031\uffe8\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\043\006\001\001\000\002\001\001\000\016\003\011" +
    "\004\017\005\016\006\007\007\015\016\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\217\043\221\050\220\001\001\000\004\043\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\021\043\022\001\001\000" +
    "\002\001\001\000\026\015\037\016\035\023\026\024\023" +
    "\025\027\026\034\027\031\030\033\041\025\046\030\001" +
    "\001\000\002\001\001\000\020\015\057\016\052\025\046" +
    "\032\131\036\056\037\050\040\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\057\016\052\025\046\032" +
    "\120\036\056\037\050\040\051\001\001\000\002\001\001" +
    "\000\006\022\117\043\022\001\001\000\002\001\001\000" +
    "\006\022\040\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\057\016\052\025" +
    "\046\031\045\032\055\036\056\037\050\040\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\057\016\052\025" +
    "\046\032\111\036\056\037\050\040\051\001\001\000\002" +
    "\001\001\000\010\033\077\034\100\035\102\001\001\000" +
    "\020\015\057\016\052\025\046\032\064\036\056\037\050" +
    "\040\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\057\016\052\025\046\031\062\032\055\036\056" +
    "\037\050\040\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\077\034\100\035\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\057\016\052\025\046\032\106\036\056\037\050" +
    "\040\051\001\001\000\020\015\057\016\052\025\046\032" +
    "\105\036\056\037\050\040\051\001\001\000\002\001\001" +
    "\000\020\015\057\016\052\025\046\032\104\036\056\037" +
    "\050\040\051\001\001\000\002\001\001\000\010\033\077" +
    "\034\100\035\102\001\001\000\010\033\077\034\100\035" +
    "\102\001\001\000\010\033\077\034\100\035\102\001\001" +
    "\000\022\015\057\016\052\025\046\031\110\032\055\036" +
    "\056\037\050\040\051\001\001\000\002\001\001\000\010" +
    "\033\077\034\100\035\102\001\001\000\002\001\001\000" +
    "\020\015\057\016\052\025\046\032\114\036\056\037\050" +
    "\040\051\001\001\000\010\033\077\034\100\035\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\077\034\100\035\102\001\001\000\002\001" +
    "\001\000\020\015\057\016\052\025\046\032\123\036\056" +
    "\037\050\040\051\001\001\000\010\033\077\034\100\035" +
    "\102\001\001\000\006\022\125\043\022\001\001\000\002" +
    "\001\001\000\014\016\127\023\130\027\031\030\033\046" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\077\034\100\035\102\001\001\000\002\001\001\000" +
    "\014\016\127\023\134\027\031\030\033\046\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\137\043" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\142\001\001\000\020\004\145\005\016\006\007\007" +
    "\015\010\146\016\014\017\143\001\001\000\002\001\001" +
    "\000\004\016\150\001\001\000\002\001\001\000\014\004" +
    "\147\005\016\006\007\007\015\016\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\154\021\153\001" +
    "\001\000\006\015\165\016\052\001\001\000\006\021\163" +
    "\044\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\157\016\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\163\044\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\167\016\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\172\004\017\005\016\006\007" +
    "\007\015\016\014\001\001\000\002\001\001\000\012\007" +
    "\175\016\176\042\174\047\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\175\016\176\047\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\204\001\001\000\002\001" +
    "\001\000\012\011\210\012\206\013\207\016\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\216\012\206\013\207\016" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\225\001\001\000\006\015\222\016\052\001\001\000" +
    "\002\001\001\000\006\014\224\043\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\227\012\206\013" +
    "\207\016\160\001\001\000\010\014\230\043\221\050\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\233\012\206\013\207\016\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void report_error(String errorBody, Object info) {
		StringBuffer errorHead = new StringBuffer("Error Sintactico");
			if(info instanceof java_cup.runtime.Symbol){
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0) {
					errorHead.append(" en la linea: "+(s.right+1));
					if (s.right >= 0){
						errorHead.append(", columna: "+(s.left+1));
				}
			}
			errorHead.append(" en el token: "+(s.value));
			errorHead.append(" -> "+errorBody);
		}
		System.err.println(errorHead);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // character ::= CHAR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("character",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // integer ::= INT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // identifier ::= IDENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unyop ::= NOT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unyop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unyop ::= MINUS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unyop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unyop ::= PLUS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unyop",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multop ::= AND 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multop",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multop ::= DIVIDE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multop",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multop ::= TIMES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multop",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // addop ::= OR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // addop ::= MINUS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // addop ::= PLUS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relop ::= NOT_EQ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relop ::= GTR_EQ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relop ::= LESS_EQ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relop ::= EQ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relop ::= GTR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relop ::= LESS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprlist ::= expr COMMA exprlist 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprlist ::= expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // designator ::= designator LEFT_BRKT expr RT_BRKT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // designator ::= var 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= LEFT_PAREN expr RT_PAREN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= unyop expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr multop expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr addop expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr relop expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= var LEFT_PAREN exprlist RT_PAREN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= designator 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= character 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= integer 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // compoundstmt ::= BEGIN stmts END 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundstmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // proccallstmt ::= identifier LEFT_PAREN exprlist RT_PAREN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccallstmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifstmt1 ::= IF expr THEN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifstmt ::= ifstmt1 ELSE stmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifstmt ::= ifstmt1 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assmntstmt ::= designator ASSMNT expr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assmntstmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // whilestmt ::= WHILE expr DO BEGIN stmt END 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= compoundstmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= proccallstmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= whilestmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmts ::= comment ifstmt stmts 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmts ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmts ::= comment assmntstmt SEMI stmts 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmts ::= comment stmt SEMI stmts 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmts ::= comment stmt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal ::= VAR var COLON identtype 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal ::= VAR var COLON identifier 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formalsp ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formalsp ::= formal formalsp 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formals ::= formal formalsp 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prochdr ::= PROCEDURE identifier LEFT_PAREN formals RT_PAREN COLON identtype 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prochdr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prochdr ::= PROCEDURE identifier LEFT_PAREN formals RT_PAREN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prochdr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procdecl ::= prochdr SEMI block 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procdecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var ::= identifier 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vars ::= comment var COMMA vars 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vars ::= comment var 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varvardecl ::= vars COLON type 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varvardecl",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vardecl ::= VAR varvardecl vardecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vardecl ::= VAR vars COLON type varvardecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardecl ::= VAR varvardecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arraytype ::= ARRAY LEFT_BRKT integer RT_BRKT OF type 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraytype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // identtype ::= identifier SEMI 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identtype",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= arraytype 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= identtype 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typedecl ::= TYPE comment identifier EQ type 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identParentesis1 ::= vardecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identParentesis1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identParentesis1 ::= identifier 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identParentesis1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identParentesis ::= identParentesis1 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identParentesis",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identParentesis ::= identParentesis COMMA identParentesis1 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identParentesis",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= identifier LEFT_PAREN identParentesis RT_PAREN 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= identifier 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= vardecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= typedecl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comment ::= COMMENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comment ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decls ::= decl SEMI comment procdecl decls 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls ::= decl SEMI comment decls 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= decls BEGIN stmts END 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM comment block DOT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

